(function (e) {
  if (typeof module == "object" && typeof module.exports == "object") {
    var t = e(require, exports);
    t !== undefined && (module.exports = t);
  } else
    typeof define == "function" && define.amd && define("swx-jskype-main/lib/models/mePerson", [
      "require",
      "exports",
      "jcafe-property-model",
      "./person",
      "./account",
      "swx-enums",
      "../modelHelpers/presence/presenceMapper",
      "../services/serviceFactory",
      "../services/stratus/instance",
      "../services/avatar/instance",
      "../modelHelpers/presence/presenceDataStorage",
      "swx-jskype-internal-application-instance",
      "../modelHelpers/personsAndGroupsHelper",
      "../modelHelpers/meData",
      "swx-utils-common",
      "../modelHelpers/contacts/dataHandlers/factory"
    ], e);
}(function (e, t) {
  function g() {
    var e;
    return function () {
      return e || (e = y()), e;
    };
  }
  function y() {
    var e = v.getUserInfoHandlers();
    return a.get().getUserInfo().then(e.onSuccess, e.onError);
  }
  function b(e) {
    return e && e !== s.onlineStatus.Unknown;
  }
  function w(e, t) {
    var n = u.getPresenceService(), r = t === s.onlineStatus.DoNotDisturb ? s.onlineStatus.Busy : t;
    n.setUserPresence(r);
    l.getCache().set(e, { status: t });
  }
  var n = e("jcafe-property-model"), r = e("./person"), i = e("./account"), s = e("swx-enums"), o = e("../modelHelpers/presence/presenceMapper"), u = e("../services/serviceFactory"), a = e("../services/stratus/instance"), f = e("../services/avatar/instance"), l = e("../modelHelpers/presence/presenceDataStorage"), c = e("swx-jskype-internal-application-instance"), h = e("../modelHelpers/personsAndGroupsHelper"), p = e("../modelHelpers/meData"), d = e("swx-utils-common"), v = e("../modelHelpers/contacts/dataHandlers/factory"), m = function (e) {
      function t(t) {
        var r = e.call(this, t) || this;
        return r.getUserInfo = g(), r._msaId = n.property({ readOnly: !0 }), r.account = new i["default"](), r.id = n.property({
          readOnly: !0,
          get: function () {
            var e = n.task(), t = c.get().signInManager;
            return t.state.once(s.loginState.SignedIn, function () {
              t._skypeToken().then(function (t) {
                if (t === r.lastSkypeToken) {
                  e.resolve(r.lastSkypeId);
                  return;
                }
                r.lastSkypeToken = t;
                try {
                  var n = h.extractSkypeIdFromToken(t);
                  !n || (r.lastSkypeId = n, r.id._set(n), r.displayName._set(n));
                  e.resolve(r.id());
                } catch (i) {
                  e.reject(i);
                }
              });
            }), e.promise;
          }
        }), r.displayName = n.property({
          readOnly: !0,
          get: function () {
            return r.getMeProfileTask || (r.getMeProfileTask = n.task(), r.id.get().then(function () {
              p.initialize().then(function () {
                return r.getMeProfileTask.resolve(r.displayName());
              }, function () {
                return r.getMeProfileTask.reject();
              });
            })), r.getMeProfileTask.promise;
          }
        }), r.preferences = n.collection(), r.status = n.property({
          set: function (e) {
            var t = n.task("setting ME status", e), i = o.map(e);
            return b(i) ? (w(r.id(), i), t.resolve(i)) : t.reject(new Error("new status value was invalid")), t.promise;
          }
        }), r.activity = n.property({
          set: function (e) {
            var t = r.activity(), i = n.task("setting ME activity");
            return a.get().setMoodMessage(r.id(), e).then(function () {
              return i.resolve(e);
            }, function () {
              return i.resolve(t);
            }), i.promise;
          }
        }), r.registeredAt = n.property({
          readOnly: !0,
          get: function () {
            var e = n.task();
            return r.getUserInfo().then(function () {
              return e.resolve(r.registeredAt());
            }, function (t) {
              return e.reject(t);
            }), e.promise;
          }
        }), r._isLinkedMsaAutoGenerated = n.property({
          readOnly: !0,
          get: function () {
            var e = n.task(), t = /^\d+:cid-\(-?\d+\)@outlook.*$/i;
            return r._msaId() !== undefined ? e.resolve(t.test(r._msaId())) : r._msaId.once(function (e) {
              return e !== undefined;
            }, function () {
              return e.resolve(t.test(r._msaId()));
            }), e.promise;
          }
        }), r.active = n.boolProperty(!0), r.id._set(t), r.displayName._set(t), r.status._set(s.onlineStatus.Offline), r.status.reset = function () {
        }, r.activity._set(""), r;
      }
      return __extends(t, e), t.prototype.updateAvatar = function (e, t) {
        return f.get().updateAvatar(this.id(), e, t);
      }, t.prototype.updateAvatarUrl = function () {
        var e = this.avatarUrl();
        e = d.url.removeQueryParameter(e, "cachebust");
        e = d.url.appendQueryParameter(e, "cachebust", new Date().getTime().toString());
        this.avatarUrl._set(e);
      }, t.prototype._reset = function () {
        this.id._set(this.id());
        this.displayName._set(this.id());
        this.getMeProfileTask = null;
        this.status._set(s.onlineStatus.Offline);
        this.callingCapabilities && this.callingCapabilities.setup();
      }, t.prototype._addCallingCapabilities = function (e) {
        this.callingCapabilities = e;
        this.capabilities.audio = this.callingCapabilities.audioCapability;
        this.capabilities.video = this.callingCapabilities.videoCapability;
        this.callingCapabilities.setup();
      }, t;
    }(r["default"]);
  t.__esModule = !0;
  t["default"] = m;
}));
