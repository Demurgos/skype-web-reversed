define("text!views/chat/pes/expressionPicker.html", [], function () {
  return "<div class=\"wrapper swx-expression-picker\"\r\n     data-bind=\"event: {\r\n        keydown:        handleKeyDown,\r\n        mouseover:      handleMouseEvent,\r\n        mouseout:       handleMouseEvent,\r\n        touchend:       handleMouseEvent,\r\n        pointerover:    handleMouseEvent,\r\n        click:          handleMouseEvent\r\n        }, enterKey: handleEnter\">\r\n    <swx-button params=\"cssClass: state.pickerButtonClass,\r\n                        icon: state.pickerButtonIcon,\r\n                        disabled: params.isDisabled, titleKey: 'button_title_emoticons',\r\n                        textKey: 'button_text_emoticons', action: openBubble,\r\n                        ariaLabelKey: 'emoticonPicker_heading_label'\"></swx-button>\r\n    <!-- ko if: state.wasOpenedBefore -->\r\n    <div class=\"bubble popup arrow down\" data-bind=\"css: { active:state.isOpened }\">\r\n\r\n        <!-- ko ifnot: state.pickerMaximized -->\r\n        <swx-expressionitem-roster params=\"item: state.selectedItem, itemStartPlayRequest: state.itemStartPlayRequest, eventEmitter: params.eventEmitter\"></swx-expressionitem-roster>\r\n        <div class=\"infoLine\"></div>\r\n        <!-- /ko -->\r\n\r\n        <!-- ko if: state.searchCapabilityEnabled -->\r\n        <div class=\"searchContainer\">\r\n            <input type=\"text\" data-bind=\"\r\n                hasFocus:       state.hasFocus,\r\n                textInput:      state.query,\r\n                event: {\r\n                    keydown:    onSearchBoxKeyDown\r\n                    },\r\n                l10n_attr: {\r\n                    'placeholder':  'input_placeholder_searchPESItems',\r\n                    'aria-label':   'input_searchPESItems_ariaLabel'\r\n                    }\"\r\n                value=\"\" name=\"query\" class=\"inputField fontSize-h4\"/>\r\n            <button tabindex=\"-1\" data-bind=\"visible: state.query, event: { mousedown: resetQuery }, enterKey: resetQuery\" type=\"button\" class=\"btn primary circle small transparent searchReset\">\r\n                <span class=\"iconfont cross\"></span>\r\n            </button>\r\n            <div class=\"offScreen\" role=\"log\" aria-live=\"polite\" data-bind=\"text: state.searchStatus\"></div>\r\n        </div>\r\n        <div class=\"infoLine\"></div>\r\n        <!-- /ko -->\r\n\r\n\r\n        <swx-expressionitems-picker params=\"tab: state.selectedTab, item: state.selectedItem, isVisible: state.isOpened, eventEmitter: params.eventEmitter\"></swx-expressionitems-picker>\r\n\r\n        <div class=\"infoLine\"></div>\r\n\r\n        <div class=\"navigationTabs\">\r\n            <div class=\"tabs\" data-bind=\"css: state.tabsCss, keyboardNavigation: { itemSelector: '.tab-item' }, enterKey: handleMouseEvent\">\r\n                <span class=\"prev\" data-bind=\"event: { click: prevPage },\r\n                                              l10n_attr: {\r\n                                                  'title': 'expressionPicker_prevPage',\r\n                                                  'aria-label': 'expressionPicker_prevPage'\r\n                                              }\">\r\n                    <span class=\"tab\"></span>\r\n                </span>\r\n                <span class=\"tabsWrapper\">\r\n                    <span class=\"container\" role=\"menu\"\r\n                          data-bind=\"template: { name: 'tabs-page-template', foreach: state.pagedTabs, as: 'page'  }\"></span>\r\n                </span>\r\n                <span class=\"next\" data-bind=\"event: { click: nextPage },\r\n                                              l10n_attr: {\r\n                                                  'title': 'expressionPicker_nextPage',\r\n                                                  'aria-label': 'expressionPicker_nextPage'\r\n                                              }\">\r\n                    <span class=\"tab\"></span>\r\n                </span>\r\n            </div>\r\n\r\n            <!-- ko if: state.storeEnabled -->\r\n            <div class=\"store iconfont add\" data-bind=\"event: {click: showStore}, enterKey: showStore,\r\n                                          l10n_attr: {\r\n                                              'title': 'expressionPicker_storeTab_title',\r\n                                              'aria-label': 'expressionPicker_storeTab_title'\r\n                                          }\" tabindex=\"0\"></div>\r\n            <!-- /ko -->\r\n        </div>\r\n    </div>\r\n    <!-- /ko -->\r\n</div>\r\n\r\n<script type=\"text/html\" id=\"tabs-page-template\">\r\n    <span class=\"tabPage\"\r\n          data-bind=\"template: { name: 'tab-template', foreach: page.tabs, as: 'tab' }\"></span>\r\n</script>\r\n\r\n<script type=\"text/html\" id=\"tab-template\">\r\n    <span data-bind=\"attr: {\r\n            'data-name': tab.id,\r\n            'title': tab.title,\r\n            'aria-label': $parents[1].selectedTabAriaLabel(tab)\r\n            }\"\r\n          aria-live=\"polite\" role=\"menuitem\" class=\"tab-item\">\r\n        <span data-bind=\"css: 'tab '+tab.htmlClass() + ($parents[1].state.selectedTab().id() === tab.id() ? ' active' : '')\">\r\n            <img data-bind=\"attr: {src: tab.thumbnailUrl()}\"/>\r\n        </span>\r\n    </span>\r\n</script>\r\n";
});
